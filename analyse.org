#+BEGIN_SRC clojure
(ns country-card-map.analysis
  (:require country-card-map.core
            semantic-csv.core
            [rojure.core :refer [r-set! r-eval r-get get-r start-rserve]]
            country-card-map.core
)
)



#+END_SRC

#+RESULTS:
: nilWARNING: seqable? already refers to: #'clojure.core/seqable? in namespace: rojure.convert, being replaced by: #'clojure.core.incubator/seqable?

#+BEGIN_SRC clojure

(start-rserve)

#+END_SRC

#+RESULTS:
: '(:out #object(java.io.BufferedReader 0x2886a462 "java.io.BufferedReader@2886a462")  :err #object(java.io.BufferedReader 0x6a121152 "java.io.BufferedReader@6a121152")  :in #object(java.io.BufferedWriter 0x3d3f4223 "java.io.BufferedWriter@3d3f4223")  :process #object(java.lang.UNIXProcess 0x795144a0 "java.lang.UNIXProcess@795144a0"))


#+BEGIN_SRC clojure



(def graph (country-card-map.core/get-total-graph))

(def edges (:edges graph))
(def nodes (:nodes graph))


(def r (rojure.core/get-r))

(semantic-csv.core/spit-csv "edges.csv" edges)
(semantic-csv.core/spit-csv "nodes.csv" nodes )





#+END_SRC

#+RESULTS:
: #'country-card-map.analysis/all-docs#'country-card-map.analysis/distinct-by#'country-card-map.analysis/all-country-names#'country-card-map.analysis/countries#'country-card-map.analysis/diseases#'country-card-map.analysis/establishments#'country-card-map.analysis/animal-population#'country-card-map.analysis/disease-names#'country-card-map.analysis/entry#'country-card-map.analysis/make-edges#'country-card-map.analysis/edges-diseases#'country-card-map.analysis/edges-establishments#'country-card-map.analysis/edges-animal-population#'country-card-map.analysis/edges#'country-card-map.analysis/countries#'country-card-map.analysis/nodes#'country-card-map.analysis/graph#'country-card-map.analysis/edges#'country-card-map.analysis/nodes#'country-card-map.analysis/r#object[java.io.BufferedWriter 0x7474a93f "java.io.BufferedWriter@7474a93f"]#object[java.io.BufferedWriter 0x15bff19 "java.io.BufferedWriter@15bff19"]


#+BEGIN_SRC R
library("visNetwork")
library("tidyverse")

links <- read_csv("edges.csv")
nodes <- read_csv("nodes.csv")
visNetwork(nodes, links,width = 1600,height = 900) %>%
    visEdges(arrows = "from") %>%
    visPhysics(enabled = T,hierarchicalRepulsion=list(sprintConstant=0.5,springLength=50)) %>%
    visHierarchicalLayout(treeSpacing = 200,blockShifting = F,sortMethod = "directed") %>%
    visSave(file = "network.html")    
#+END_SRC

#+RESULTS:

